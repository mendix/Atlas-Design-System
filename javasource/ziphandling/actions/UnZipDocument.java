// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package ziphandling.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This Java action will Unzip the file that is used as input parameter. It returns a list of FileDocuments (unzipped), be aware that the unzipped documents are committed. To prevent full disks delete the list after use.
 */
public class UnZipDocument extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use ZipFile.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __ZipFile;
	private final system.proxies.FileDocument ZipFile;

	public UnZipDocument(
		IContext context,
		IMendixObject _zipFile
	)
	{
		super(context);
		this.__ZipFile = _zipFile;
		this.ZipFile = _zipFile == null ? null : system.proxies.FileDocument.initialize(getContext(), _zipFile);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		InputStream zipInputStream = Core.getFileDocumentContent(getContext(), ZipFile.getMendixObject());
		List<IMendixObject> returnList = new ArrayList<IMendixObject>();
		
        final ZipInputStream zip = new ZipInputStream(zipInputStream);
        ZipEntry entry;
        String fileName;
        int fileCheck = 1;
    	entry = zip.getNextEntry();
        while (fileCheck ==1) {
        
            if (!entry.isDirectory()) {
            	
                fileName = entry.getName();
                IMendixObject mendixObject = Core.instantiate(getContext(), "System.FileDocument");
        		mendixObject.setValue(getContext(), "Name" , fileName );
        
        	
        		 ByteArrayOutputStream fout = new ByteArrayOutputStream();
        	        for (int c = zip.read(); c != -1; c = zip.read()) {
        	          fout.write(c);
        	        }
        	        zip.closeEntry();
        	        fout.close();
        	    ByteArrayInputStream inStream = new ByteArrayInputStream( fout.toByteArray() );
        		Core.storeFileDocumentContent(getContext(), mendixObject,inStream);
                returnList.add(mendixObject);
                try {
                	
                	entry = zip.getNextEntry();
                	if (entry == null) {
                		fileCheck=0; // EOF reached
                	}
                }
                	
                catch (IOException e)
                {
                	fileCheck=0; // EOF reached
                }
                  
            }
         
        }

      
        zip.close();
        return returnList;
		
		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "UnZipDocument";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
