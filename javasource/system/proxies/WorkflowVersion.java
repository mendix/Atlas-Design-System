// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

public class WorkflowVersion
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject workflowVersionMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "System.WorkflowVersion";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		VersionHash("VersionHash"),
		ModelJSON("ModelJSON"),
		WorkflowVersion_PreviousVersion("System.WorkflowVersion_PreviousVersion"),
		WorkflowVersion_WorkflowDefinition("System.WorkflowVersion_WorkflowDefinition"),
		WorkflowVersion_TaskDefinition("System.WorkflowVersion_TaskDefinition");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public WorkflowVersion(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "System.WorkflowVersion"));
	}

	protected WorkflowVersion(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject workflowVersionMendixObject)
	{
		if (workflowVersionMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("System.WorkflowVersion", workflowVersionMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a System.WorkflowVersion");

		this.workflowVersionMendixObject = workflowVersionMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'WorkflowVersion.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static system.proxies.WorkflowVersion initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return system.proxies.WorkflowVersion.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static system.proxies.WorkflowVersion initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new system.proxies.WorkflowVersion(context, mendixObject);
	}

	public static system.proxies.WorkflowVersion load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return system.proxies.WorkflowVersion.initialize(context, mendixObject);
	}

	public static java.util.List<system.proxies.WorkflowVersion> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<system.proxies.WorkflowVersion> result = new java.util.ArrayList<system.proxies.WorkflowVersion>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//System.WorkflowVersion" + xpathConstraint))
			result.add(system.proxies.WorkflowVersion.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of VersionHash
	 */
	public final java.lang.String getVersionHash()
	{
		return getVersionHash(getContext());
	}

	/**
	 * @param context
	 * @return value of VersionHash
	 */
	public final java.lang.String getVersionHash(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.VersionHash.toString());
	}

	/**
	 * Set value of VersionHash
	 * @param versionhash
	 */
	public final void setVersionHash(java.lang.String versionhash)
	{
		setVersionHash(getContext(), versionhash);
	}

	/**
	 * Set value of VersionHash
	 * @param context
	 * @param versionhash
	 */
	public final void setVersionHash(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String versionhash)
	{
		getMendixObject().setValue(context, MemberNames.VersionHash.toString(), versionhash);
	}

	/**
	 * @return value of ModelJSON
	 */
	public final java.lang.String getModelJSON()
	{
		return getModelJSON(getContext());
	}

	/**
	 * @param context
	 * @return value of ModelJSON
	 */
	public final java.lang.String getModelJSON(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ModelJSON.toString());
	}

	/**
	 * Set value of ModelJSON
	 * @param modeljson
	 */
	public final void setModelJSON(java.lang.String modeljson)
	{
		setModelJSON(getContext(), modeljson);
	}

	/**
	 * Set value of ModelJSON
	 * @param context
	 * @param modeljson
	 */
	public final void setModelJSON(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String modeljson)
	{
		getMendixObject().setValue(context, MemberNames.ModelJSON.toString(), modeljson);
	}

	/**
	 * @return value of WorkflowVersion_PreviousVersion
	 */
	public final system.proxies.WorkflowVersion getWorkflowVersion_PreviousVersion() throws com.mendix.core.CoreException
	{
		return getWorkflowVersion_PreviousVersion(getContext());
	}

	/**
	 * @param context
	 * @return value of WorkflowVersion_PreviousVersion
	 */
	public final system.proxies.WorkflowVersion getWorkflowVersion_PreviousVersion(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		system.proxies.WorkflowVersion result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.WorkflowVersion_PreviousVersion.toString());
		if (identifier != null)
			result = system.proxies.WorkflowVersion.load(context, identifier);
		return result;
	}

	/**
	 * Set value of WorkflowVersion_PreviousVersion
	 * @param workflowversion_previousversion
	 */
	public final void setWorkflowVersion_PreviousVersion(system.proxies.WorkflowVersion workflowversion_previousversion)
	{
		setWorkflowVersion_PreviousVersion(getContext(), workflowversion_previousversion);
	}

	/**
	 * Set value of WorkflowVersion_PreviousVersion
	 * @param context
	 * @param workflowversion_previousversion
	 */
	public final void setWorkflowVersion_PreviousVersion(com.mendix.systemwideinterfaces.core.IContext context, system.proxies.WorkflowVersion workflowversion_previousversion)
	{
		if (workflowversion_previousversion == null)
			getMendixObject().setValue(context, MemberNames.WorkflowVersion_PreviousVersion.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.WorkflowVersion_PreviousVersion.toString(), workflowversion_previousversion.getMendixObject().getId());
	}

	/**
	 * @return value of WorkflowVersion_WorkflowDefinition
	 */
	public final system.proxies.WorkflowDefinition getWorkflowVersion_WorkflowDefinition() throws com.mendix.core.CoreException
	{
		return getWorkflowVersion_WorkflowDefinition(getContext());
	}

	/**
	 * @param context
	 * @return value of WorkflowVersion_WorkflowDefinition
	 */
	public final system.proxies.WorkflowDefinition getWorkflowVersion_WorkflowDefinition(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		system.proxies.WorkflowDefinition result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.WorkflowVersion_WorkflowDefinition.toString());
		if (identifier != null)
			result = system.proxies.WorkflowDefinition.load(context, identifier);
		return result;
	}

	/**
	 * Set value of WorkflowVersion_WorkflowDefinition
	 * @param workflowversion_workflowdefinition
	 */
	public final void setWorkflowVersion_WorkflowDefinition(system.proxies.WorkflowDefinition workflowversion_workflowdefinition)
	{
		setWorkflowVersion_WorkflowDefinition(getContext(), workflowversion_workflowdefinition);
	}

	/**
	 * Set value of WorkflowVersion_WorkflowDefinition
	 * @param context
	 * @param workflowversion_workflowdefinition
	 */
	public final void setWorkflowVersion_WorkflowDefinition(com.mendix.systemwideinterfaces.core.IContext context, system.proxies.WorkflowDefinition workflowversion_workflowdefinition)
	{
		if (workflowversion_workflowdefinition == null)
			getMendixObject().setValue(context, MemberNames.WorkflowVersion_WorkflowDefinition.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.WorkflowVersion_WorkflowDefinition.toString(), workflowversion_workflowdefinition.getMendixObject().getId());
	}

	/**
	 * @return value of WorkflowVersion_TaskDefinition
	 */
	public final java.util.List<system.proxies.WorkflowTaskDefinition> getWorkflowVersion_TaskDefinition() throws com.mendix.core.CoreException
	{
		return getWorkflowVersion_TaskDefinition(getContext());
	}

	/**
	 * @param context
	 * @return value of WorkflowVersion_TaskDefinition
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<system.proxies.WorkflowTaskDefinition> getWorkflowVersion_TaskDefinition(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<system.proxies.WorkflowTaskDefinition> result = new java.util.ArrayList<system.proxies.WorkflowTaskDefinition>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.WorkflowVersion_TaskDefinition.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(system.proxies.WorkflowTaskDefinition.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of WorkflowVersion_TaskDefinition
	 * @param workflowversion_taskdefinition
	 */
	public final void setWorkflowVersion_TaskDefinition(java.util.List<system.proxies.WorkflowTaskDefinition> workflowversion_taskdefinition)
	{
		setWorkflowVersion_TaskDefinition(getContext(), workflowversion_taskdefinition);
	}

	/**
	 * Set value of WorkflowVersion_TaskDefinition
	 * @param context
	 * @param workflowversion_taskdefinition
	 */
	public final void setWorkflowVersion_TaskDefinition(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<system.proxies.WorkflowTaskDefinition> workflowversion_taskdefinition)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (system.proxies.WorkflowTaskDefinition proxyObject : workflowversion_taskdefinition)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.WorkflowVersion_TaskDefinition.toString(), identifiers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return workflowVersionMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final system.proxies.WorkflowVersion that = (system.proxies.WorkflowVersion) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "System.WorkflowVersion";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
