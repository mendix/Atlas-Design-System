{"version":3,"sources":["index.js"],"names":["getLocales","handlers","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","uses24HourClock","usesMetricSystem","usesAutoDateAndTime","usesAutoTimeZone","logUnknownEvent","type","console","error","getPartialTag","languageCode","scriptCode","addEventListener","handler","has","add","removeEventListener","delete","findBestAvailableLanguage","languageTags","locales","i","length","currentLocale","languageTag","isRTL","includes","partial","next"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,UAArC;AAmBA,SACEC,WADF,EAEEC,UAFF,EAGEC,aAHF,EAIEJ,UAJF,EAKEK,uBALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,eARF,EASEC,gBATF,EAUEC,mBAVF,EAWEC,gBAXF,QAYO,UAZP;;AAcA,SAASC,eAAT,CAAyBC,IAAzB,EAAuC;AACrCC,EAAAA,OAAO,CAACC,KAAR,YAAmBF,IAAnB;AACD;;AACD,SAASG,aAAT,CAAuB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAvB,EAA6D;AAC3D,SAAOD,YAAY,IAAIC,UAAU,GAAG,MAAMA,UAAT,GAAsB,EAApC,CAAnB;AACD;;AAED,OAAO,SAASC,gBAAT,CACLN,IADK,EAELO,OAFK,EAGC;AACN,MAAIP,IAAI,KAAK,QAAb,EAAuB;AACrBD,IAAAA,eAAe,CAACC,IAAD,CAAf;AACD,GAFD,MAEO,IAAI,CAACZ,QAAQ,CAACoB,GAAT,CAAaD,OAAb,CAAL,EAA4B;AACjCnB,IAAAA,QAAQ,CAACqB,GAAT,CAAaF,OAAb;AACD;AACF;AAED,OAAO,SAASG,mBAAT,CACLV,IADK,EAELO,OAFK,EAGC;AACN,MAAIP,IAAI,KAAK,QAAb,EAAuB;AACrBD,IAAAA,eAAe,CAACC,IAAD,CAAf;AACD,GAFD,MAEO,IAAIZ,QAAQ,CAACoB,GAAT,CAAaD,OAAb,CAAJ,EAA2B;AAChCnB,IAAAA,QAAQ,CAACuB,MAAT,CAAgBJ,OAAhB;AACD;AACF;AAED,OAAO,SAASK,yBAAT,CACLC,YADK,EAEyD;AAC9D,QAAMC,OAAO,GAAG3B,UAAU,EAA1B;;AAEA,OAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAME,aAAa,GAAGH,OAAO,CAACC,CAAD,CAA7B;AACA,UAAM;AAAEG,MAAAA,WAAF;AAAed,MAAAA,YAAf;AAA6Be,MAAAA;AAA7B,QAAuCF,aAA7C;;AAEA,QAAIJ,YAAY,CAACO,QAAb,CAAsBF,WAAtB,CAAJ,EAAwC;AACtC,aAAO;AAAEA,QAAAA,WAAF;AAAeC,QAAAA;AAAf,OAAP;AACD;;AAED,UAAME,OAAO,GAAGlB,aAAa,CAACc,aAAD,CAA7B;AACA,UAAMK,IAAI,GAAGR,OAAO,CAACC,CAAC,GAAG,CAAL,CAApB;;AAEA,QACE,CAAC,CAACO,IAAD,IAASD,OAAO,KAAKlB,aAAa,CAACmB,IAAD,CAAnC,KACAT,YAAY,CAACO,QAAb,CAAsBC,OAAtB,CAFF,EAGE;AACA,aAAO;AAAEH,QAAAA,WAAW,EAAEG,OAAf;AAAwBF,QAAAA;AAAxB,OAAP;AACD;;AAED,QACE,CAAC,CAACG,IAAD,IAASlB,YAAY,KAAKkB,IAAI,CAAClB,YAAhC,KACAS,YAAY,CAACO,QAAb,CAAsBhB,YAAtB,CAFF,EAGE;AACA,aAAO;AAAEc,QAAAA,WAAW,EAAEd,YAAf;AAA6Be,QAAAA;AAA7B,OAAP;AACD;AACF;AACF","sourcesContent":["// @flow\n\nimport { getLocales, handlers } from \"./module\";\n\nimport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nexport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  TemperatureUnit,\n} from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesMetricSystem,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n} from \"./module\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage(\n  languageTags: string[],\n): {| languageTag: string, isRTL: boolean |} | typeof undefined {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag)) {\n      return { languageTag, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial)\n    ) {\n      return { languageTag: partial, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode)\n    ) {\n      return { languageTag: languageCode, isRTL };\n    }\n  }\n}\n"]}