{"version":3,"sources":["module.web.js"],"names":["canUseDOM","window","document","createElement","ensureCountryCode","countryCode","toUpperCase","splitLanguageTag","languageTag","languageCode","split","convertLanguageTagToLocale","countryCodeFallback","toLowerCase","isRTL","USES_RTL_LAYOUT","includes","getCurrentLocale","navigator","language","getCountry","getCalendar","languages","i","length","getCurrencies","currencies","forEach","currency","CURRENCIES","indexOf","push","getLocales","cache","locales","locale","getNumberFormatSettings","formatter","Intl","NumberFormat","separators","format","replace","decimalSeparator","groupingSeparator","getTemperatureUnit","USES_FAHRENHEIT","getTimeZone","DateTimeFormat","hour","resolvedOptions","timeZone","uses24HourClock","Date","match","usesMetricSystem","USES_IMPERIAL","usesAutoDateAndTime","usesAutoTimeZone","handlers","Set","addEventListener","handler"],"mappings":";;;;;;;;;;;;;;;;;;AAEA;;AAeA,MAAMA,SAAS,GAAG,CAAC,EACjB,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHC,CAAnB;;AAMA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwD;AACtD,SAAOA,WAAW,KAAK,KAAhB,GAAwB,IAAxB,GAA+BA,WAAW,CAACC,WAAZ,EAAtC;AACD;;AAED,SAASC,gBAAT,CACEC,WADF,EAKG;AACD,QAAM,CAACC,YAAD,EAAeJ,WAAf,IAA8BG,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAApC;AACA,SAAO;AAAED,IAAAA,YAAF;AAAgBJ,IAAAA;AAAhB,GAAP;AACD;;AAED,SAASM,0BAAT,CACEH,WADF,EAEEI,mBAFF,EAGU;AACR,MAAI;AAAEH,IAAAA,YAAF;AAAgBJ,IAAAA;AAAhB,MAAgCE,gBAAgB,CAACC,WAAD,CAApD;AACAC,EAAAA,YAAY,GAAGA,YAAY,CAACI,WAAb,EAAf;AACAR,EAAAA,WAAW,GAAGD,iBAAiB,CAACC,WAAW,IAAIO,mBAAhB,CAA/B;AAEA,SAAO;AACLH,IAAAA,YADK;AAELJ,IAAAA,WAFK;AAGLG,IAAAA,WAAW,YAAKC,YAAL,cAAqBJ,WAArB,CAHN;AAILS,IAAAA,KAAK,EAAEC,2BAAgBC,QAAhB,CAAyBP,YAAzB;AAJF,GAAP;AAMD;;AAED,SAASQ,gBAAT,GAAoC;AAClC,SAAON,0BAA0B,CAACO,SAAS,CAACC,QAAX,EAAqBC,UAAU,EAA/B,CAAjC;AACD;;AAEM,SAASC,WAAT,GAAiC;AACtC,SAAO,WAAP;AACD;;AAEM,SAASD,UAAT,GAA8B;AACnC,QAAM;AAAEE,IAAAA;AAAF,MAAgBJ,SAAtB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAM;AAAElB,MAAAA;AAAF,QAAkBE,gBAAgB,CAACe,SAAS,CAACC,CAAD,CAAV,CAAxC;;AAEA,QAAIlB,WAAJ,EAAiB;AACf,aAAOD,iBAAiB,CAACC,WAAD,CAAxB;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAEM,SAASoB,aAAT,GAAmC;AACxC,QAAM;AAAEH,IAAAA;AAAF,MAAgBJ,SAAtB;AACA,QAAMQ,UAAoB,GAAG,EAA7B;AAEAJ,EAAAA,SAAS,CAACK,OAAV,CAAkBR,QAAQ,IAAI;AAC5B,UAAM;AAAEd,MAAAA;AAAF,QAAkBE,gBAAgB,CAACY,QAAD,CAAxC;;AAEA,QAAId,WAAJ,EAAiB;AACf,YAAMuB,QAAQ,GAAGC,sBAAWzB,iBAAiB,CAACC,WAAD,CAA5B,CAAjB;;AAEA,UAAIqB,UAAU,CAACI,OAAX,CAAmBF,QAAnB,MAAiC,CAAC,CAAtC,EAAyC;AACvCF,QAAAA,UAAU,CAACK,IAAX,CAAgBH,QAAhB;AACD;AACF;AACF,GAVD;;AAYA,MAAIF,UAAU,CAACF,MAAX,KAAsB,CAA1B,EAA6B;AAC3BE,IAAAA,UAAU,CAACK,IAAX,CAAgB,KAAhB;AACD;;AAED,SAAOL,UAAP;AACD;;AAEM,SAASM,UAAT,GAAgC;AACrC,QAAM;AAAEV,IAAAA;AAAF,MAAgBJ,SAAtB;AACA,QAAMb,WAAW,GAAGe,UAAU,EAA9B;AACA,QAAMa,KAAe,GAAG,EAAxB;AACA,QAAMC,OAAiB,GAAG,EAA1B;AAEAZ,EAAAA,SAAS,CAACK,OAAV,CAAkBR,QAAQ,IAAI;AAC5B,UAAMgB,MAAM,GAAGxB,0BAA0B,CAACQ,QAAD,EAAWd,WAAX,CAAzC;;AAEA,QAAI4B,KAAK,CAACH,OAAN,CAAcK,MAAM,CAAC3B,WAArB,MAAsC,CAAC,CAA3C,EAA8C;AAC5C0B,MAAAA,OAAO,CAACH,IAAR,CAAaI,MAAb;AACAF,MAAAA,KAAK,CAACF,IAAN,CAAWI,MAAM,CAAC3B,WAAlB;AACD;AACF,GAPD;AASA,SAAO0B,OAAP;AACD;;AAEM,SAASE,uBAAT,GAAyD;AAC9D,QAAM;AAAE5B,IAAAA;AAAF,MAAkBS,gBAAgB,EAAxC;AACA,QAAMoB,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB/B,WAAtB,CAAlB;AACA,QAAMgC,UAAU,GAAG,CAAC,GAAGH,SAAS,CAACI,MAAV,CAAiB,SAAjB,EAA4BC,OAA5B,CAAoC,KAApC,EAA2C,EAA3C,CAAJ,CAAnB;AAEA,SAAO;AACLC,IAAAA,gBAAgB,EAAEH,UAAU,CAACA,UAAU,CAAChB,MAAX,GAAoB,CAArB,CADvB;AAELoB,IAAAA,iBAAiB,EAAEJ,UAAU,CAAC,CAAD;AAFxB,GAAP;AAID;;AAEM,SAASK,kBAAT,GAA+C;AACpD,SAAOC,2BAAgB9B,QAAhB,CAAyBI,UAAU,EAAnC,IAAyC,YAAzC,GAAwD,SAA/D;AACD;;AAEM,SAAS2B,WAAT,GAA+B;AACpC,QAAM;AAAEvC,IAAAA;AAAF,MAAkBS,gBAAgB,EAAxC;AACA,QAAMoB,SAAS,GAAG,IAAIC,IAAI,CAACU,cAAT,CAAwBxC,WAAxB,EAAqC;AAAEyC,IAAAA,IAAI,EAAE;AAAR,GAArC,CAAlB;AACA,SAAOZ,SAAS,CAACa,eAAV,GAA4BC,QAA5B,IAAwC,SAA/C;AACD;;AAEM,SAASC,eAAT,GAAoC;AACzC,QAAM;AAAE5C,IAAAA;AAAF,MAAkBS,gBAAgB,EAAxC;AACA,QAAMoB,SAAS,GAAG,IAAIC,IAAI,CAACU,cAAT,CAAwBxC,WAAxB,EAAqC;AAAEyC,IAAAA,IAAI,EAAE;AAAR,GAArC,CAAlB;AACA,SAAO,CAACZ,SAAS,CAACI,MAAV,CAAiB,IAAIY,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB,CAAjB,EAA2CC,KAA3C,CAAiD,QAAjD,CAAR;AACD;;AAEM,SAASC,gBAAT,GAAqC;AAC1C,SAAO,CAACC,yBAAcxC,QAAd,CAAuBI,UAAU,EAAjC,CAAR;AACD;;AAEM,SAASqC,mBAAT,GAAgD,CAAE;;AAClD,SAASC,gBAAT,GAA6C,CAAE;;AAE/C,MAAMC,QAAuB,GAAG,IAAIC,GAAJ,EAAhC;;;AAEP,IAAI5D,SAAJ,EAAe;AACbC,EAAAA,MAAM,CAAC4D,gBAAP,CAAwB,gBAAxB,EAA0C,MAAM;AAC9CF,IAAAA,QAAQ,CAAChC,OAAT,CAAiBmC,OAAO,IAAIA,OAAO,EAAnC;AACD,GAFD;AAGD","sourcesContent":["// @flow\n\nimport {\n  USES_FAHRENHEIT,\n  USES_IMPERIAL,\n  USES_RTL_LAYOUT,\n  CURRENCIES,\n} from \"./constants\";\n\nimport type {\n  Calendar,\n  Locale,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n);\n\nfunction ensureCountryCode(countryCode: string): string {\n  return countryCode === \"419\" ? \"UN\" : countryCode.toUpperCase();\n}\n\nfunction splitLanguageTag(\n  languageTag: string,\n): {|\n  languageCode: string,\n  countryCode?: string,\n|} {\n  const [languageCode, countryCode] = languageTag.split(\"-\");\n  return { languageCode, countryCode };\n}\n\nfunction convertLanguageTagToLocale(\n  languageTag: string,\n  countryCodeFallback: string,\n): Locale {\n  let { languageCode, countryCode } = splitLanguageTag(languageTag);\n  languageCode = languageCode.toLowerCase();\n  countryCode = ensureCountryCode(countryCode || countryCodeFallback);\n\n  return {\n    languageCode,\n    countryCode,\n    languageTag: `${languageCode}-${countryCode}`,\n    isRTL: USES_RTL_LAYOUT.includes(languageCode),\n  };\n}\n\nfunction getCurrentLocale(): Locale {\n  return convertLanguageTagToLocale(navigator.language, getCountry());\n}\n\nexport function getCalendar(): Calendar {\n  return \"gregorian\";\n}\n\nexport function getCountry(): string {\n  const { languages } = navigator;\n\n  for (let i = 0; i < languages.length; i++) {\n    const { countryCode } = splitLanguageTag(languages[i]);\n\n    if (countryCode) {\n      return ensureCountryCode(countryCode);\n    }\n  }\n\n  return \"US\";\n}\n\nexport function getCurrencies(): string[] {\n  const { languages } = navigator;\n  const currencies: string[] = [];\n\n  languages.forEach(language => {\n    const { countryCode } = splitLanguageTag(language);\n\n    if (countryCode) {\n      const currency = CURRENCIES[ensureCountryCode(countryCode)];\n\n      if (currencies.indexOf(currency) === -1) {\n        currencies.push(currency);\n      }\n    }\n  });\n\n  if (currencies.length === 0) {\n    currencies.push(\"USD\");\n  }\n\n  return currencies;\n}\n\nexport function getLocales(): Locale[] {\n  const { languages } = navigator;\n  const countryCode = getCountry();\n  const cache: string[] = [];\n  const locales: Locale[] = [];\n\n  languages.forEach(language => {\n    const locale = convertLanguageTagToLocale(language, countryCode);\n\n    if (cache.indexOf(locale.languageTag) === -1) {\n      locales.push(locale);\n      cache.push(locale.languageTag);\n    }\n  });\n\n  return locales;\n}\n\nexport function getNumberFormatSettings(): NumberFormatSettings {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.NumberFormat(languageTag);\n  const separators = [...formatter.format(1000000.1).replace(/\\d/g, \"\")];\n\n  return {\n    decimalSeparator: separators[separators.length - 1],\n    groupingSeparator: separators[0],\n  };\n}\n\nexport function getTemperatureUnit(): TemperatureUnit {\n  return USES_FAHRENHEIT.includes(getCountry()) ? \"fahrenheit\" : \"celsius\";\n}\n\nexport function getTimeZone(): string {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.DateTimeFormat(languageTag, { hour: \"numeric\" });\n  return formatter.resolvedOptions().timeZone || \"Etc/UTC\";\n}\n\nexport function uses24HourClock(): boolean {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.DateTimeFormat(languageTag, { hour: \"numeric\" });\n  return !formatter.format(new Date(2000, 0, 1, 20)).match(/am|pm/i);\n}\n\nexport function usesMetricSystem(): boolean {\n  return !USES_IMPERIAL.includes(getCountry());\n}\n\nexport function usesAutoDateAndTime(): Option<boolean> {}\nexport function usesAutoTimeZone(): Option<boolean> {}\n\nexport const handlers: Set<Function> = new Set();\n\nif (canUseDOM) {\n  window.addEventListener(\"languagechange\", () => {\n    handlers.forEach(handler => handler());\n  });\n}\n"]}