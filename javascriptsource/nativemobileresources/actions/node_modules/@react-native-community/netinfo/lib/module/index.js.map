{"version":3,"sources":["index.ts"],"names":["useState","useEffect","DEFAULT_CONFIGURATION","State","Types","_configuration","_state","createState","configure","configuration","tearDown","fetch","requestedInterface","latest","addEventListener","listener","add","remove","useNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","netInfo","setNetInfo"],"mappings":"gIASA,OAAQA,QAAR,CAAkBC,SAAlB,KAAkC,OAAlC,CACA,MAAOC,CAAAA,qBAAP,KAAkC,iCAAlC,CACA,MAAOC,CAAAA,KAAP,KAAkB,kBAAlB,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,kBAAvB,CAGA,GAAIC,CAAAA,cAA0C,CAAGH,qBAAjD,CAGA,GAAII,CAAAA,MAAoB,CAAG,IAA3B,CACA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAa,CAC/B,MAAO,IAAIJ,CAAAA,KAAJ,CAAUE,cAAV,CAAP,CACD,CAFD,CAWA,MAAO,SAASG,CAAAA,SAAT,CACLC,aADK,CAEC,CACNJ,cAAc,kBACTH,qBADS,CAETO,aAFS,CAAd,CAKA,GAAIH,MAAJ,CAAY,CACVA,MAAM,CAACI,QAAP,GACAJ,MAAM,CAAGC,WAAW,EAApB,CACD,CACF,CASD,MAAO,SAASI,CAAAA,KAAT,CACLC,kBADK,CAEwB,CAC7B,GAAI,CAACN,MAAL,CAAa,CACXA,MAAM,CAAGC,WAAW,EAApB,CACD,CACD,MAAOD,CAAAA,MAAM,CAACO,MAAP,CAAcD,kBAAd,CAAP,CACD,CAaD,MAAO,SAASE,CAAAA,gBAAT,CACLC,QADK,CAEsB,CAC3B,GAAI,CAACT,MAAL,CAAa,CACXA,MAAM,CAAGC,WAAW,EAApB,CACD,CAEDD,MAAM,CAACU,GAAP,CAAWD,QAAX,EACA,MAAO,WAAY,CACjBT,MAAM,EAAIA,MAAM,CAACW,MAAP,CAAcF,QAAd,CAAV,CACD,CAFD,CAGD,CAOD,MAAO,SAASG,CAAAA,UAAT,CACLT,aADK,CAEe,CACpB,GAAIA,aAAJ,CAAmB,CACjBD,SAAS,CAACC,aAAD,CAAT,CACD,CAHmB,cAKUT,QAAQ,CAAqB,CACzDmB,IAAI,CAAEf,KAAK,CAACgB,gBAAN,CAAuBC,OAD4B,CAEzDC,WAAW,CAAE,KAF4C,CAGzDC,mBAAmB,CAAE,KAHoC,CAIzDC,OAAO,CAAE,IAJgD,CAArB,CALlB,wCAKbC,OALa,eAKJC,UALI,eAYpBzB,SAAS,CAAC,UAAoB,CAC5B,MAAOa,CAAAA,gBAAgB,CAACY,UAAD,CAAvB,CACD,CAFQ,CAEN,EAFM,CAAT,CAIA,MAAOD,CAAAA,OAAP,CACD,CAED,WAAc,kBAAd,CAEA,cAAe,CACbjB,SAAS,CAATA,SADa,CAEbG,KAAK,CAALA,KAFa,CAGbG,gBAAgB,CAAhBA,gBAHa,CAIbI,UAAU,CAAVA,UAJa,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration: Types.NetInfoConfiguration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: false,\n    isInternetReachable: false,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  addEventListener,\n  useNetInfo,\n};\n"]}