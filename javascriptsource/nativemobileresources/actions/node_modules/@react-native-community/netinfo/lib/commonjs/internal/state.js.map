{"version":3,"sources":["state.ts"],"names":["State","configuration","_nativeEventSubscription","_subscriptions","Set","_latestState","_handleNativeStateUpdate","state","_internetReachability","update","convertedState","_convertState","forEach","handler","_handleInternetReachabilityUpdate","isInternetReachable","nextState","_fetchCurrentState","requestedInterface","NativeInterface","getCurrentState","input","currentState","latest","Promise","resolve","add","then","remove","delete","tearDown","clear","InternetReachability","eventEmitter","addListener","PrivateTypes","DEVICE_CONNECTIVITY_EVENT"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  private _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"]}