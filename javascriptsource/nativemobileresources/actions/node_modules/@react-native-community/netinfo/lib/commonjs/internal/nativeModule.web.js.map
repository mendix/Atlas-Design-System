{"version":3,"sources":["nativeModule.web.ts"],"names":["connection","window","navigator","mozConnection","webkitConnection","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","handlers","nativeHandlers","RNCNetInfo","addListener","handler","DEVICE_CONNECTIVITY_EVENT","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  NetInfoNativeModule,\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoNoConnectionState,\n  NetInfoCellularState,\n  NetInfoBluetoothState,\n  NetInfoEthernetState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n  NetInfoOtherState,\n  NetInfoCellularGeneration,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n\n// Check if the browser supports the connection API\nconst connection =\n  window.navigator.connection ||\n  window.navigator.mozConnection ||\n  window.navigator.webkitConnection;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = navigator.onLine;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler, false);\n          window.addEventListener('offline', nativeHandler, false);\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler);\n          window.addEventListener('offline', nativeHandler);\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n};\n\nexport default RNCNetInfo;\n"]}