{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","configuration","listener","_isInternetReachable","undefined","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","_setIsInternetReachable","isInternetReachable","_listener","_setExpectsConnection","expectsConnection","cancel","clearTimeout","_checkInternetReachability","responsePromise","fetch","_configuration","reachabilityUrl","method","cache","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","update","state","isConnected","currentState","tearDown"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache',\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>(\n      (_, reject): void => {\n        timeoutHandle = setTimeout(\n          (): void => reject('timedout'),\n          this._configuration.reachabilityRequestTimeout,\n        );\n      },\n    );\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>(\n      (_, reject): void => {\n        cancel = (): void => reject('canceled');\n      },\n    );\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if (error !== 'canceled') {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]}